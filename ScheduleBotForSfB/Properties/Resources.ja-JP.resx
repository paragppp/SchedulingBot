<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Text_AlertDuration" xml:space="preserve">
    <value>数値のみを入力してください。&lt;br&gt;例：60</value>
  </data>
  <data name="Text_AlertEmailAddresses" xml:space="preserve">
    <value>Eメールアドレスのみを入力してください。&lt;br&gt;例：abc@company.com, def@government.gov</value>
  </data>
  <data name="Text_AlertEmailAddressesNumber1" xml:space="preserve">
    <value />
  </data>
  <data name="Text_AlertEmailAddressesNumber2" xml:space="preserve">
    <value>つのEメールアドレスを入力してください。</value>
  </data>
  <data name="Text_AlertNoAvailableTime" xml:space="preserve">
    <value>予定の合う時間がありません。別の日を入力してください。</value>
  </data>
  <data name="Text_AlertNumberOfParticipants" xml:space="preserve">
    <value>数値のみを入力してください。&lt;br&gt;例：3</value>
  </data>
  <data name="Text_AlertWhen" xml:space="preserve">
    <value>日付のみを入力してください。&lt;br&gt;例：2015-06-20</value>
  </data>
  <data name="Text_Arranged" xml:space="preserve">
    <value>ミーティングを設定しました。ありがとうございました！</value>
  </data>
  <data name="Text_Canceled" xml:space="preserve">
    <value>ミーティングをキャンセルしました。</value>
  </data>
  <data name="Text_CheckDuration1" xml:space="preserve">
    <value>ミーティングの時間は</value>
  </data>
  <data name="Text_CheckDuration2" xml:space="preserve">
    <value>分ですね。</value>
  </data>
  <data name="Text_CheckEmailAddresses" xml:space="preserve">
    <value>ミーティングへの出席依頼は以下の方に出しますね。：</value>
  </data>
  <data name="Text_CheckNumberOfParticipants1" xml:space="preserve">
    <value>ミーティングへの出席依頼人数は</value>
  </data>
  <data name="Text_CheckNumberOfParticipants2" xml:space="preserve">
    <value>人ですね。</value>
  </data>
  <data name="Text_CheckSubject1" xml:space="preserve">
    <value>ミーティングのタイトルは</value>
  </data>
  <data name="Text_CheckSubject2" xml:space="preserve">
    <value>ですね。</value>
  </data>
  <data name="Text_CheckWhen1" xml:space="preserve">
    <value>ミーティングの日程は</value>
  </data>
  <data name="Text_CheckWhen2" xml:space="preserve">
    <value>ですね。</value>
  </data>
  <data name="Text_Confirmation1" xml:space="preserve">
    <value>ミーティングのタイトル：</value>
  </data>
  <data name="Text_Confirmation2" xml:space="preserve">
    <value>スケジュール：</value>
  </data>
  <data name="Text_Confirmation3" xml:space="preserve">
    <value>参加者：</value>
  </data>
  <data name="Text_Confirmation4" xml:space="preserve">
    <value>で予約しました。ありがとうございました！</value>
  </data>
  <data name="Text_FinalConfirmation" xml:space="preserve">
    <value>上記の予定でミーティングを予約して宜しいですか？</value>
  </data>
  <data name="Text_Hello1" xml:space="preserve">
    <value>こんにちは！</value>
  </data>
  <data name="Text_Hello2" xml:space="preserve">
    <value>さん！</value>
  </data>
  <data name="Text_PleaseEnterDuration" xml:space="preserve">
    <value>ミーティングの時間は&lt;b&gt;何分&lt;/b&gt;ですか？</value>
  </data>
  <data name="Text_PleaseEnterEmailAddresses" xml:space="preserve">
    <value>出席依頼を送る方の&lt;b&gt;全てのEメールアドレスをコンマ区切り&lt;/b&gt;で入力してください。メーリングリストの場合は、メールアドレスの前に「dl-」を付けてください 。</value>
  </data>
  <data name="Text_PleaseEnterNumberOfParticipants" xml:space="preserve">
    <value>ミーティングの参加依頼を&lt;b&gt;何人&lt;/b&gt;に出しますか？</value>
  </data>
  <data name="Text_PleaseEnterSubject" xml:space="preserve">
    <value>まず、&lt;b&gt;ミーティングのタイトル&lt;/b&gt;を入力してください。</value>
  </data>
  <data name="Text_PleaseEnterWhen" xml:space="preserve">
    <value>ミーティングを&lt;b&gt;いつ&lt;/b&gt;行いたいですか？</value>
  </data>
  <data name="Text_PleaseSelectRoom" xml:space="preserve">
    <value>以下の候補から部屋を選んでください。</value>
  </data>
  <data name="Text_PleaseSelectSchedule" xml:space="preserve">
    <value>以下の候補からミーティングのスケジュールを選んでください。</value>
  </data>
  <data name="Text_PleaseSignIn" xml:space="preserve">
    <value>まず、以下のリンクをクリックしてサインインしてください。&lt;br&gt;サインイン後、表示されるが数字を入力してください。</value>
  </data>
  <data name="Text_TableAttendees" xml:space="preserve">
    <value>参加者</value>
  </data>
  <data name="Text_TableDuration" xml:space="preserve">
    <value>長さ(分)</value>
  </data>
  <data name="Text_TableNumberOfInvitation" xml:space="preserve">
    <value>参加者数(人)</value>
  </data>
  <data name="Text_TableSchedule" xml:space="preserve">
    <value>スケジュール</value>
  </data>
  <data name="Text_TableSubject" xml:space="preserve">
    <value>タイトル</value>
  </data>
  <data name="Text_Welcome" xml:space="preserve">
    <value>こんにちは！スケジュールBOTです！</value>
  </data>
</root>